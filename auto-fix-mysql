#!/usr/bin/env python
# encoding: utf-8

import os
import sys
import traceback
import subprocess

import psutil
import mysql.connector


MYSQL_MYSQL_DB_DIR = "/var/lib/mysql/mysql"
MYSQL_BACKUP_DIR = "/etc/yunohost/auto-fix-mysql/mysql-db-backup/"


def mysql_is_running():
    return len([x for x in psutil.process_iter() if x.name().lower() == "mysqld"]) > 0


def mysql_is_broken():
    if mysql_is_running():
        return False

    return subprocess.call(["service", "mysql", "start"]) != 0


def backup_mysql_db():
    connection = mysql.connector.connect(
        user='root',
        password=open("/etc/yunohost/mysql", "r").read().strip(),
        host='127.0.0.1',
        database='mysql'
    )

    cursor = connection.cursor()

    try:
        cursor.execute("show tables")

        # can't lock log tables
        tables = [x[0] for x in cursor.fetchall() if not x[0].endswith("log")]

        sql = "LOCK TABLES %s READ;" % " READ,".join(tables)
        cursor.execute(sql)

        if not os.path.exists(MYSQL_BACKUP_DIR):
            os.makedirs(MYSQL_BACKUP_DIR)

        subprocess.check_call(["rsync", "-a", MYSQL_MYSQL_DB_DIR, MYSQL_BACKUP_DIR])

    except Exception as e:
        traceback.print_exc(file=sys.stdout)
        print e

    finally:
        cursor.execute("UNLOCK TABLES")

        cursor.close()
        connection.close()


def there_is_a_backup():
    return os.path.exists(os.path.join(MYSQL_BACKUP_DIR, "mysql"))


def fix_mysql():
    if there_is_a_backup():
        fix_mysql_using_back()


def fix_mysql_using_back():
    assert not mysql_is_running()


if __name__ == '__main__':
   if not mysql_is_broken():
       backup_mysql_db()
   else:
       fix_mysql()
